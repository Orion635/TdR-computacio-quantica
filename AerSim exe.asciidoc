+*In[57]:*+
[source, ipython3]
----
#Importem les llibreries que utilitzarem
from qiskit import QuantumCircuit, transpile
from qiskit_aer import AerSimulator
from qiskit.visualization import plot_histogram

# Escollim el simulador que utilitzarem 
simulator = AerSimulator()

# Creem el nostre circuit
circuit = QuantumCircuit(3,3)


circuit.h(0)
circuit.cx(0, 1)
circuit.h(1)

# Mapegem els resultats dels qbits a bits
circuit.measure([0, 1], [0, 1])

#Compilem el circuit
compiled_circuit = transpile(circuit, simulator)

# Executem el circuit en AerSimulator 1000 vegades
job = simulator.run(compiled_circuit, shots=1000)

# Recollim els resultats obtinguts
result = job.result()

# Retorn de els recomptes, el circuit ha estat comprovat 
#en el compositor per veure els possibles resultats
counts = result.get_counts(compiled_circuit)
print("\nTotal count for 000, 010, 101 and 011 are:", counts)

# Dibuixem el circuit per visualitzar-lo
circuit.draw("mpl")

----


+*Out[57]:*+
----

Total count for 000, 010, 101 and 011 are: {'001': 246, '000': 267, '010': 224, '011': 263}

![png](output_0_1.png)
----


+*In[58]:*+
[source, ipython3]
----
#Fem un histograma dels resultats obtinguts
plot_histogram(counts)
----


+*Out[58]:*+
----
![png](output_1_0.png)
----


+*In[59]:*+
[source, ipython3]
----
#Repetim el mateix però en comptes de fer el circuit 1000 vegades només el farem 1.
#Tots el passos que falten en aquesta cel·la respecte a l'anterior és perquè simplement
#estavem definint conceptes com per exeple que simulator és AerSimulator. Per tant no cal
#repetir-lo ja que, internament, el codi ja ho sap. De la mateixa manera que no cal tornar
#a importar les llibreries que ja hem importat al principi.
job = simulator.run(compiled_circuit, shots=1)
counts = result.get_counts(compiled_circuit)
result = job.result()

#A continuació creem un seguit de condicionals. Això farà que, si es compleixen les condicions que li donem, el codi
#faci el que li demanem i si no, doncs no. És a dir que el que fem és: si a == x aleshores fes això. En aquest cas
#demanem que, segons el valor de "counts", faci una cosa o una altre.

if counts == {'000': 1}:
    print ("Aquesta és una resposta predeterminada formulada per un IA (Intelligent Author).")

if counts == {'001': 1}:
    print ("Barça>>>Madrid (si ho escriu un ordinador serà cert, no??)")

if counts == {'010': 1}:
    print ("If you get to this point, just for you to know, you can copy this code. No copyright or anything.")

if counts == {'011': 1}:
    print ("Ja no se que posar. un Hello World? Vale, Hello World (!=que fàcil és programar, m'encanta).")

----


+*In[61]:*+
[source, ipython3]
----
#Definim les variables "i" i "s"
i = 0
s = ""

#Repetim el nostre codi en bucle fins que "i" arribi a un valor determinat, cada vegadanque es repeteixi
#el bucle el valor de "i" augmentarà en 1.

while i<1000: #Escollim per a quin valor de "i" el bucle pararà. És a dir, quans resultats volem obtenir.
    job = simulator.run(compiled_circuit, shots=1)
    counts = result.get_counts(compiled_circuit)
    result = job.result()
    if counts == {'000': 1}:
        s +="0" #Si el resultat és '000' --> afegeix un 0 a "s".

    if counts == {'001': 1}:
        s +="1" #Si el resultat és '001' --> afegeix un 1 a "s".

    if counts == {'010': 1}:
        s +="1" #Si el resultat és '010' --> afegeix un 1 a "s".

    if counts == {'011': 1}:
        s +="0" #Si el resultat és '011' --> afegeix un 0 a "s".
    
    i += 1 #Agumentem el valor de "i" en 1.

print (s) #Demanem que ens faci el retorn de la variable "s" en una linea de text.
----


+*Out[61]:*+
----
0011010000000111001000111111001011010001011010100100011100100010110000010110100010000111110100101111000000110100011010011110100011000101111110000001001110000100010010111010011111100011110010010111101101001011111110000001111010110100010000101101110110010101011100101111101010110000010000101111111011011010100011010010101001101010010100111000110101101110011100010011000001011110000111101011110101010101011011110010101011101001111010100110011011011111000111000100100011110110001101111111011111110000101101000010100010000001000011110101000010001011101101110101000011010101110110101111100011110000111001101100111111000010011110100000111111111010011101110110011101100001111010110000010110000111111011000101101100001001101001101010101111011000000010001000110011001000100010101100111110111001010101001000111000011111100010100110000101111111111110011001010100111100110010011111001000111101010100001000010000101101111011110100110001000110010000101110011000011111100011001101100011000110001001000011100111001100
----
